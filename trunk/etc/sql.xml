<sql>
  <postgre_sql>
    <nameOfSqlDatabase>Postgre SQL</nameOfSqlDatabase>
      <index>
        <index_name> cuon_user_idx_name</index_name>
        <index_special> </index_special>
        <index_table>cuon_user</index_table>
        <index_column>name</index_column>
    </index>
    
    <index>
        <index_name> address_idx_lastname</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>lastname</index_column>
    </index>
   <index>
        <index_name> address_idx_firstname</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>firstname</index_column>
    </index>
     <index>
        <index_name> address_idx_phone</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>phone</index_column>
    </index>
    <index>
        <index_name> address_idx_lastname_firstname</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>lastname,firstname</index_column>
    </index>
     <index>
        <index_name> address_idx_status_info</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>status_info</index_column>
    </index>
    
    <index>
        <index_name> address_idx_status_client</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>status,client</index_column>
    </index>
     <index>
        <index_name> address_idx_caller_id</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>caller_id</index_column>
    </index>
      <index>
        <index_name> address_idx_rep_id</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>rep_id</index_column>
    </index>
      <index>
        <index_name> address_idx_salesman_id</index_name>
        <index_special> </index_special>
        <index_table>address</index_table>
        <index_column>salesman_id</index_column>
    </index>
    
    
    
    <index>
        <index_name>partner_idx_addressid</index_name>
        <index_special> </index_special>
        <index_table>partner</index_table>
        <index_column>addressid</index_column>
    </index>
    
    <index>
        <index_name>partner_idx_status_client</index_name>
        <index_special> </index_special>
        <index_table>partner</index_table>
        <index_column>status,client</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_partnerid</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>partnerid</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_process_status</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>process_status</index_column>
    </index>
     <index>
        <index_name>partner_schedul_idx_status_client</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>status,client</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_user_id</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>user_id</index_column>
    </index>
    
    <index>
        <index_name>partner_schedul_idx_schedul_date</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>schedul_date</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_insert_time_day</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>date_part('day',insert_time)</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_insert_time_week</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>date_part('week',insert_time)</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_sep_info_3 </index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>sep_info_3</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_insert_time_month</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>date_part('month',insert_time)</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_insert_time_quarter</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>date_part('quarter',insert_time)</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_insert_time_year</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>date_part('year',insert_time)</index_column>
    </index>
    <index>
        <index_name>partner_schedul_idx_schedul_staff_id</index_name>
        <index_special> </index_special>
        <index_table>partner_schedul</index_table>
        <index_column>schedul_staff_id</index_column>
    </index>
    
    
    
      <index>
        <index_name>address_notes_idx_address_id</index_name>
        <index_special> </index_special>
        <index_table>address_notes</index_table>
        <index_column>address_id</index_column>
    </index>
    <index>
        <index_name>address_notes_idx_status_client</index_name>
        <index_special> </index_special>
        <index_table>address_notes</index_table>
        <index_column>status,client</index_column>
    </index>
    
    
    
    <index>
        <index_name>contact_idx_address_id</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column>address_id</index_column>
    </index>
    
    <index>
        <index_name>contact_idx_process_status</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column>process_status</index_column>
    </index>
    
    <index>
        <index_name>contact_idx_contacter_id</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column>contacter_id</index_column>
    </index>
     <index>
        <index_name>contact_idx_status_client</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column>status,client</index_column>
    </index>
     <index>
        <index_name> contact_idx_char_length_schedul_date</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column>char_length(schedul_date) </index_column>
    </index>
    <index>
        <index_name>contact_idx_date_century_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('century',insert_time)</index_column>
    </index>
     <index>
        <index_name>contact_idx_date_decade_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('decade',insert_time)</index_column>
    </index>
     <index>
        <index_name>contact_idx_date_part_year_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('year',insert_time)</index_column>
    </index>
     <index>
        <index_name>contact_idx_date_part_quarter_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('quarter',insert_time)</index_column>
    </index>
     <index>
        <index_name>contact_idx_date_part_month_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('month',insert_time)</index_column>
    </index>
     <index>
        <index_name>contact_idx_date_part_week_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('week',insert_time)</index_column>
    </index>
    <index>
        <index_name>contact_idx_date_day_insert_time</index_name>
        <index_special> </index_special>
        <index_table>contact</index_table>
        <index_column> date_part('doy',insert_time)</index_column>
    </index>
    
    
     <index>
        <index_name>bank_idx_bcn</index_name>
        <index_special> </index_special>
        <index_table>bank</index_table>
        <index_column>bcn</index_column>
    </index>
    
     <index>
        <index_name>dms_idx_insert_from_module</index_name>
        <index_special> </index_special>
        <index_table>dms</index_table>
        <index_column>insert_from_module</index_column>
    </index>
    
    
    
  <index>
        <index_name> article_idx_all1</index_name>
        <index_special> </index_special>
        <index_table>article</index_table>
        <index_column> designation,client,status</index_column>
    </index>
    
    <index>
        <index_name> article_idx_materialgroup</index_name>
        <index_special> </index_special>
        <index_table>article</index_table>
        <index_column> material_group</index_column>
    </index>
    
    <index>
        <index_name> article_parts_idx_part_id</index_name>
        <index_special> </index_special>
        <index_table>article_parts_list</index_table>
        <index_column> part_id</index_column>
    </index>
    
    <index>
        <index_name> material_group_idx_name</index_name>
        <index_special> </index_special>
        <index_table>material_group</index_table>
        <index_column> name</index_column>
    </index>
     <index>
        <index_name> orderbook_idx_number</index_name>
        <index_special> </index_special>
        <index_table>orderbook</index_table>
        <index_column>number</index_column>
    </index>
    <index>
        <index_name> orderbook_idx_modul_number</index_name>
        <index_special> </index_special>
        <index_table>orderbook</index_table>
        <index_column>modul_number</index_column>
    </index>
    <index>
        <index_name> orderbook_idx_modul_order_number</index_name>
        <index_special> </index_special>
        <index_table>orderbook</index_table>
        <index_column>modul_order_number</index_column>
    </index>
    <index>
        <index_name> orderposition_idx_orderid</index_name>
        <index_special> </index_special>
        <index_table>orderposition</index_table>
        <index_column> orderid</index_column>
    </index>
    <index>
        <index_name> orderposition_idx_articleid</index_name>
        <index_special> </index_special>
        <index_table>orderposition</index_table>
        <index_column> articleid</index_column>
    </index>
    <index>
        <index_name> orderinvoice_idx_orderid</index_name>
        <index_special> </index_special>
        <index_table>orderinvoice</index_table>
        <index_column> orderid</index_column>
    </index>
    <index>
        <index_name> orderinvoice_idx_order_top</index_name>
        <index_special> </index_special>
        <index_table>orderinvoice</index_table>
        <index_column> order_top</index_column>
    </index>
    
    
    
    <index>
        <index_name> list_of_invoices_idx_invoice_number</index_name>
        <index_special> </index_special>
        <index_table>list_of_invoices</index_table>
        <index_column>invoice_number</index_column>
    </index>
    <index>
        <index_name> list_of_invoices_idx_order_number</index_name>
        <index_special> </index_special>
        <index_table>list_of_invoices</index_table>
        <index_column>order_number</index_column>
    </index>
     <index>
        <index_name> list_of_invoices_idx_date_of_invoice</index_name>
        <index_special> </index_special>
        <index_table>list_of_invoices</index_table>
        <index_column>date_of_invoice</index_column>
    </index>
     <index>
        <index_name> list_of_invoices_idx_maturity</index_name>
        <index_special> </index_special>
        <index_table>list_of_invoices</index_table>
        <index_column>maturity</index_column>
    </index>
     <index>
        <index_name> list_of_invoices_idx_total_amount</index_name>
        <index_special> </index_special>
        <index_table>list_of_invoices</index_table>
        <index_column>total_amount</index_column>
    </index>
    
    <index>
        <index_name> in_payment_idx_inpayment</index_name>
        <index_special> </index_special>
        <index_table>in_payment</index_table>
        <index_column>inpayment</index_column>
    </index>
    
    <index>
        <index_name> in_payment_idx_date_of_paid</index_name>
        <index_special> </index_special>
        <index_table>in_payment</index_table>
        <index_column>date_of_paid</index_column>
    </index>
    
    
      <index>
        <index_name> in_payment_idx_account_id</index_name>
        <index_special> </index_special>
        <index_table>in_payment</index_table>
        <index_column>account_id</index_column>
    </index>
    
      <index>
        <index_name> in_payment_idx_order_id</index_name>
        <index_special> </index_special>
        <index_table>in_payment</index_table>
        <index_column>order_id</index_column>
    </index>
    
    
    <index>
        <index_name> staff_idx_cuon_username</index_name>
        <index_special> </index_special>
        <index_table>staff</index_table>
        <index_column> cuon_username</index_column>
    </index>
    
    <index>
        <index_name> projects_idx_all1</index_name>
        <index_special> </index_special>
        <index_table>projects</index_table>
        <index_column>name,designation,client,status</index_column>
    </index>
    
    <index>
        <index_name> projects_idx_modul_project_number</index_name>
        <index_special> </index_special>
        <index_table>projects</index_table>
        <index_column>modul_project_number</index_column>
    </index>
    <index>
        <index_name> projects_idx_modul_number</index_name>
        <index_special> </index_special>
        <index_table>projects</index_table>
        <index_column>modul_number</index_column>
    </index>
    <index>
        <index_name> projects_idx_customer_id</index_name>
        <index_special> </index_special>
        <index_table>projects</index_table>
        <index_column>customer_id</index_column>
    </index>
    <index>
        <index_name> project_phases_idx_project_id</index_name>
        <index_special> </index_special>
        <index_table>project_phases</index_table>
        <index_column>project_id</index_column>
    </index>
     
    <index>
        <index_name> project_tasks_idx_phase_id</index_name>
        <index_special> </index_special>
        <index_table>project_tasks</index_table>
        <index_column>phase_id</index_column>
    </index>
    
    <index>
        <index_name>  project_task_staff_res_idx_task_id</index_name>
        <index_special> </index_special>
        <index_table> project_task_staff_res</index_table>
        <index_column>task_id</index_column>
    </index>
    <index>
        <index_name>  project_task_material_res_idx_task_id</index_name>
        <index_special> </index_special>
        <index_table> project_task_material_res</index_table>
        <index_column>task_id</index_column>
    </index>
    <index>
        <index_name>botany_idx_all1</index_name>
        <index_special> </index_special>
        <index_table>botany</index_table>
        <index_column>botany_name,local_name,client,status</index_column>
    </index>
    
    <index>
        <index_name>hibernation_idx_all1</index_name>
        <index_special> </index_special>
        <index_table>hibernation</index_table>
        <index_column>sequence_of_stock, hibernation_number,client,status</index_column>
    </index>
    
    <index>
        <index_name>hibernation_plant_idx_all1</index_name>
        <index_special> </index_special>
        <index_table>hibernation_plant</index_table>
        <index_column>plant_number,diameter,client,status</index_column>
    </index>
    
    
    <foreign_key>
            <foreign_key_name>PartnerAddress</foreign_key_name> 
            <foreign_key_sql>foreign key (addressid) references address (id) on delete restrict on update restrict </foreign_key_sql> 
        <foreign_table>partner</foreign_table>
    </foreign_key>

        
<foreign_key>
            <foreign_key_name>OrderpositionArticleid</foreign_key_name> 
            <foreign_key_sql>foreign key (articleid) references articles (id) on delete restrict on update restrict </foreign_key_sql> 
        <foreign_table>orderposition</foreign_table>
    </foreign_key>

     <foreign_key>
        <foreign_key_name>HibernationAddressID</foreign_key_name> 
        <foreign_key_sql>foreign key (addressnumber) references address (id) on delete restrict on update restrict </foreign_key_sql> 
    <foreign_table>hibernation</foreign_table>        
    </foreign_key>
    
    
    
    
 
   <function>
      
      <nameOfFunction>fct_delete( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    DECLARE
    f_upd     varchar(400);
    v_delete varchar(20) ;
    BEGIN
        v_delete   := ''delete'' ;
        f_upd := '' update '' || TG_RELNAME  || '' set status =  ''|| quote_literal(v_delete) || ''  where id = '' || OLD.id   ;
        RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
        RAISE NOTICE '' sql =  % '',f_upd  ;
        execute f_upd ;
        RAISE NOTICE '' Name =  % '', TG_NAME ;
        RETURN NULL ;
    END;
      </textOfFunction>
    <description>if delete a record, dont realy delete, set status to delete </description>

    </function>

<function>
      
      <nameOfFunction>fct_update( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    BEGIN
      if not OLD.status = ''delete'' then 
            NEW.update_user_id = current_user   ;
            NEW.update_time = (select  now()) ;
            NEW.user_id = OLD.user_id;
            
            NEW.insert_time = OLD.insert_time ;
            NEW.status = ''update'' ;
            RAISE NOTICE ''Name =  % '', TG_NAME ;
            RETURN NEW; 
      else 
            RETURN OLD;
      end if \;
    END;
      </textOfFunction>
    <description>set the user_id to current_user </description>

    </function>
<function>
      
      <nameOfFunction>fct_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    BEGIN
        NEW.user_id = current_user   ;
        NEW.insert_time = (select  now()) ;
                      NEW.status = ''insert'' ;
        RAISE NOTICE ''Name =  % '', TG_NAME ;
        RETURN NEW; 
    END;
      </textOfFunction>
    <description>set the user_id to current_user </description>

    </function>
   <function>
      <old_name>fct_stock_goods_insert() </old_name>
      <nameOfFunction>fct_stock_goods_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    DECLARE
    f_upd     varchar(400);
    v_delete varchar(20) ;
                  v_actual_stock float;
    BEGIN
        
        f_upd := ''  update '' || TG_RELNAME || '' set actual_stock = (select sum(to_embed) - sum(roll_out) from '' || TG_RELNAME || '' where  stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' )  where  id = '' || NEW.id   ;

        RAISE NOTICE '' table-name =  % '', TG_RELNAME ;
        RAISE NOTICE '' sql =  % '',f_upd  ;
        RAISE NOTICE '' Name =  % '', TG_NAME ;
        execute f_upd ;
        RETURN NEW ;
    END;
      </textOfFunction>
    <description>if insert new goods, actual the stock, old = f_upd := '' select case when (select actual_stock from '' || TG_RELNAME || '' where id = (select max(id) from '' || TG_RELNAME || '' where stock_id = '' || NEW.stock_id || '' and article_id = '' || NEW.article_id ||'' ))  is  NULL  then  0 END  +  ''||  NEW.to_embed  -  NEW.roll_out || ''  into v_actual_stock from '' || TG_RELNAME  || ''  where id = '' || NEW.id   ;
 </description>

    </function>
    <function>
      <old_name>fct_partner_schedul_change() </old_name>
      <nameOfFunction>fct_partner_schedul_change( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>

  BEGIN
      if not OLD.status = ''delete'' then 
            NEW.update_user_id = current_user   ;
            NEW.update_time = (select  now()) ;
            NEW.user_id = OLD.user_id;
                          NEW.insert_time = OLD.insert_time ;
                          NEW.status = ''update'' ;
                          if NEW.sep_info_3 = 2 then 
                            NEW.sep_info_3 = 0 ;
                          else  
                            NEW.sep_info_3 = 5 ;
                          end if \;
            RAISE NOTICE ''Name =  % '', TG_NAME ;
            RETURN NEW; 
      else 
            RETURN OLD;
      end if \;
    END;
    
      </textOfFunction>
    <description>set sep_info_3 to 5 </description>

    </function>
    
    
    <function>
      <old_name>fct_partner_schedul_insert() </old_name>
      <nameOfFunction>fct_partner_schedul_insert( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    BEGIN
        NEW.user_id = current_user   ;
        NEW.insert_time = (select  now()) ;
                      NEW.status = ''insert'' ;
                      NEW.sep_info_3 = 5 ;
        RAISE NOTICE ''Name =  % '', TG_NAME ;
        RETURN NEW; 
    END;
      </textOfFunction>
    <description>set the user_id to current_user </description>

    </function>
    
<function>
      <old_name>fct_update_t_schedul_date() </old_name>
      <nameOfFunction>fct_update_t_schedul_date( ) returns OPAQUE</nameOfFunction>
      <language>plpgsql</language>
    <textOfFunction>
    DECLARE
    sDateFormat    varchar(50);

    BEGIN

       
            select into sDateformat type_c from cuon_values where name = ''SQLDateFormat'' ;
            
            NEW.dschedul_date = to_date(NEW.schedul_date, sDateFormat) ;
            NEW.dschedul_date_end = to_date(NEW.schedul_date_end , sDateFormat) ;

            RAISE NOTICE ''Name =  % '', TG_NAME ;
            RETURN NEW; 
      
      END;
      </textOfFunction>
    <description>set the user_id to current_user </description>

    </function>
    <trigger>
      <nameOfTrigger>trg_change_partner_schedul</nameOfTrigger>
      <table>partner_schedul</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_partner_schedul_change() ;  </textOfTrigger>
      <description>update or insert set sep_info_3 to 5 </description>
      
    </trigger>
    
     <trigger>
      <nameOfTrigger>trg_insertPartnerSchedul</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_partner_schedul_insert() ;  </textOfTrigger>
      <description>insert PARTNER_SCHEDUL </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePARTNER_SCHEDUL</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PARTNER_SCHEDUL, set status to delete  </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updatePARTNER_SCHEDUL_ddate</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before update</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update_t_schedul_date() ;  </textOfTrigger>
      <description>if update date, then ddate  </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPARTNER_SCHEDUL_ddate</nameOfTrigger>
      <table>PARTNER_SCHEDUL</table>
      <action>before insert</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update_t_schedul_date() ;  </textOfTrigger>
      <description>if new date, then ddate  </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertAddress</nameOfTrigger>
      <table>address</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert address </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_deleteAddress</nameOfTrigger>
      <table>address</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a address, check for use in order, then delete all CUON_CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateAddress</nameOfTrigger>
      <table>address</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update address </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateCONTACT_ddate</nameOfTrigger>
      <table>contact</table>
      <action>before update</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update_t_schedul_date() ;  </textOfTrigger>
      <description>if new date, det ddate  </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertContact_ddate</nameOfTrigger>
      <table>contact</table>
      <action>before insert</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update_t_schedul_date() ;  </textOfTrigger>
      <description>if new date, det ddate  </description>
      
    </trigger>
    
  <trigger>
      <nameOfTrigger>trg_deleteArticle</nameOfTrigger>
      <table>articles</table>
      <action>after delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a article, check for use in order, then delete all CUON_CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertArticle</nameOfTrigger>
      <table>articles</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateArticle</nameOfTrigger>
      <table>articles</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_insertStockGoods</nameOfTrigger>
      <table>stock_goods</table>
      <action>after insert</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_stock_goods_insert() ;  </textOfTrigger>
      <description>update article </description>
      
    </trigger>

  <trigger>
      <nameOfTrigger>trg_insertCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert CUON_CLIENTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a CUON_CLIENTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateCUON_CLIENTS</nameOfTrigger>
      <table>CUON_CLIENTS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update CUON_CLIENTS </description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert STAFF </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a STAFF, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateSTAFF</nameOfTrigger>
      <table>STAFF</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update STAFF </description>
      
    </trigger>
    
    
    
<trigger>
      <nameOfTrigger>trg_insertPROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECTS</nameOfTrigger>
      <table>PROJECTS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECTS </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASKS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASKS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASKS</nameOfTrigger>
      <table>PROJECT_TASKS</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASKS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASK_STAFF_RES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASK_STAFF_RES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASK_STAFF_RES</nameOfTrigger>
      <table>PROJECT_TASK_STAFF_RES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASK_STAFF_RES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_TASK_MATERIAL_RES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_TASK_MATERIAL_RES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_TASK_MATERIAL_RES</nameOfTrigger>
      <table>PROJECT_TASK_MATERIAL_RES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_TASK_MATERIAL_RES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertPROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert PROJECT_PHASES </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deletePROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a PROJECT_PHASES, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updatePROJECT_PHASES</nameOfTrigger>
      <table>PROJECT_PHASES</table>
      <action>before update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update PROJECT_PHASES </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert ORDERBOOK </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a ORDERBOOK, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateORDERBOOK</nameOfTrigger>
      <table>ORDERBOOK</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update ORDERBOOK </description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertDMS</nameOfTrigger>
      <table>DMS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert DMS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteDMS</nameOfTrigger>
      <table>DMS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a DMS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateDMS</nameOfTrigger>
      <table>DMS</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update DMS </description>
      
    </trigger>
    
    
   
   
    <trigger>
      <nameOfTrigger>trg_insertCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert CLIENTS </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a CLIENTS, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateCLIENTS</nameOfTrigger>
      <table>CLIENTS</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update CLIENTS </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert BIBLIO </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a BIBLIO, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateBIBLIO</nameOfTrigger>
      <table>BIBLIO</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update BIBLIO </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert invoice_number </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_deleteListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a invoice, check for use in order, then delete the invoice </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_updateListOfInvoices</nameOfTrigger>
      <table>list_of_invoices</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update  list_of_invoice</description>
      
    </trigger>
    
    
    <trigger>
      <nameOfTrigger>trg_insertBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert BOTANY </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a BOTANY, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateBOTANY</nameOfTrigger>
      <table>BOTANY</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update BOTANY </description>
      
    </trigger>
    
    <trigger>
      <nameOfTrigger>trg_insertHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert HIBERNATION_PLANT </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a HIBERNATION_PLANT, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateHIBERNATION_PLANT</nameOfTrigger>
      <table>HIBERNATION_PLANT</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update HIBERNATION_PLANT </description>
      
    </trigger>
    <trigger>
      <nameOfTrigger>trg_insertHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>before insert </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_insert() ;  </textOfTrigger>
      <description>insert HIBERNATION </description>
      
    </trigger>
 <trigger>
      <nameOfTrigger>trg_deleteHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>before delete</action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_delete() ;  </textOfTrigger>
      <description>if delete a HIBERNATION, set status to delete  </description>
      
    </trigger>
   <trigger>
      <nameOfTrigger>trg_updateHIBERNATION</nameOfTrigger>
      <table>HIBERNATION</table>
      <action>after update </action>
      <cursor>FOR EACH ROW</cursor>
      <textOfTrigger>EXECUTE PROCEDURE fct_update() ;  </textOfTrigger>
      <description>update HIBERNATION </description>
      
    </trigger>
    
  </postgre_sql>
  
</sql>
